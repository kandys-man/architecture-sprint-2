# version: '3'
name: mongo-sharding-repl
services:

  # сервер конфигурации
  configSrv:
    image: mongo:4.2 # docker образ
    container_name: configSrv 
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  # запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард 
  shard1:
    image: mongo:4.2
    container_name: shard1
    restart: always
    ports:
      - "27018:27018"
    volumes:
      - shard1-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",  # устанавливает имя набора реплик 
        "shard1",     # имя набора реплик
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 2-й шард 
  shard2:
    image: mongo:4.2
    container_name: shard2
    restart: always
    ports:
      - "27019:27019"
    volumes:
      - shard2-data:/data/db
    command:
      [
        "--shardsvr",    # запуск в режиме шардинга
        "--replSet",     # устанавливает имя набора реплик 
        "shard2",        # имя набора реплик
        "--bind_ip_all", # обратите внимание - оно отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  # роутер
  router:
    image: mongo:4.2
    container_name: router
    restart: always
    ports:
      - "27020:27020"
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27017", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-1:
    image: mongo:4.2
    container_name: shard1-1
    restart: always
    ports:
      - "27011:27011"
    volumes:
      - shard1-1-data:/data/db
    command:
      ["--replSet", "shard1", "--bind_ip_all", "--port", "27011"]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-2:
    image: mongo:4.2
    container_name: shard1-2
    restart: always
    ports:
      - "27012:27012"
    volumes:
      - shard1-2-data:/data/db
    command:
      ["--replSet", "shard1", "--bind_ip_all", "--port", "27012"]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-3:
    image: mongo:4.2
    container_name: shard1-3
    restart: always
    ports:
      - "27013:27013"
    volumes:
      - shard1-3-data:/data/db
    command:
      ["--replSet", "shard1", "--bind_ip_all", "--port", "27013"]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-1:
    image: mongo:4.2
    container_name: shard2-1
    restart: always
    ports:
      - "27021:27021"
    volumes:
      - shard2-1-data:/data/db
    command:
      ["--replSet", "shard2", "--bind_ip_all", "--port", "27021"]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-2:
    image: mongo:4.2
    container_name: shard2-2
    restart: always
    ports:
      - "27022:27022"
    volumes:
      - shard2-2-data:/data/db
    command:
      ["--replSet", "shard2", "--bind_ip_all", "--port", "27022"]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-3:
    image: mongo:4.2
    container_name: shard2-3
    restart: always
    ports:
      - "27023:27023"
    volumes:
      - shard2-3-data:/data/db
    command:
      ["--replSet", "shard2", "--bind_ip_all", "--port", "27023"]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://router:27020/somedb"
      MONGODB_DATABASE_NAME: "somedb"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default

volumes:
  config-data:
  shard1-data:
  shard2-data:
  shard1-1-data:
  shard1-2-data:
  shard1-3-data:
  shard2-1-data:
  shard2-2-data:
  shard2-3-data:

